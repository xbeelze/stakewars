SPLIT REWARD TO MULTIPLE ACCOUNTS CHALLENGE 8!

Install cargo and Rust in case you don't have it. This command is for Linux or MacOS.

curl --proto '=https' --tlsv1.2 https://sh.rustup.rs -sSf | sh

source $HOME/.cargo/env
Add the wasm32-unknown-unknown toolchain

rustup target add wasm32-unknown-unknown
Clone the project

git clone https://github.com/zavodil/near-staking-pool-owner
Compile smart contract

cd near-staking-pool-owner/contract
rustup target add wasm32-unknown-unknown
cargo build --target wasm32-unknown-unknown --release
Deploy smart contract on your owner account. Adjust the path to .wasm file if required.

replace xx with your wallet name

NEAR_ENV=shardnet near deploy xx.shardnet.near --wasmFile target/wasm32-unknown-unknown/release/contract.wasm
Initialize the smart contract picking accounts for splitting revenue.

Replace xx with your wallet name, xx1 can fill in my wallet name (colak.shardnet.near)/your friends, for xx2 you can enter your own wallet name

CONTRACT_ID=xx.shardnet.near

# Change numerator and denomitor to adjust the % for split.
near call $CONTRACT_ID new '{"staking_pool_account_id": "xx.factory.shardnet.near", "owner_id":"xx.shardnet.near", "reward_receivers": [["xx1.shardnet.near", {"numerator": 3, "denominator":10}], ["xx2.shardnet.near", {"numerator": 70, "denominator":100}]]}' --accountId $CONTRACT_ID
Contoh

CONTRACT_ID=colak.shardnet.near

# Change numerator and denomitor to adjust the % for split.
near call $CONTRACT_ID new '{"staking_pool_account_id": "xbeelze.factory.shardnet.near", "owner_id":"colak.shardnet.near", "reward_receivers": [["adam.shardnet.near", {"numerator": 3, "denominator":10}], ["colak.shardnet.near", {"numerator": 70, "denominator":100}]]}' --accountId $CONTRACT_ID
Wait until you start receiving rewards on your node staking pool. Do a withdraw of rewards.

xx change your wallet name

CONTRACT_ID=xx.shardnet.near
NEAR_ENV=shardnet near call $CONTRACT_ID withdraw '{}' --accountId $CONTRACT_ID --gas 200000000000000
useful commands
Cek proposal
near proposals | grep xx.factory.shardnet.near
(Check your validator whether it is active or not, if it is not active, no output comes out)
near validators current | grep xx.factory.shardnet.near
(check your next validator status)
near validators next | grep xx.factory.shardnet.near
(Checking logs)
journalctl -n 100 -f -u neard
(Or if you want color run this command):

sudo apt install ccze
journalctl -n 100 -f -u neard | ccze -A
Cek delegator dan stake
near view xx.factory.shardnet.near get_accounts '{"from_index": 0, "limit": 10}' --accountId xx.shardnet.near
Cek produced block dan chunk
curl -s -d '{"jsonrpc": "2.0", "method": "validators", "id": "dontcare", "params": [null]}' -H 'Content-Type: application/json' 127.0.0.1:3030 | jq  '.result.current_validators[] | select(.account_id | contains ("xx.factory.shardnet.near"))'
(Check the reason why your validator was kicked out)
curl -s -d '{"jsonrpc": "2.0", "method": "validators", "id": "dontcare", "params": [null]}' -H 'Content-Type: application/json' 127.0.0.1:3030 | jq -c '.result.prev_epoch_kickout[] | select(.account_id | contains ("xx.factory.shardnet.near"))' | jq .reason
Cek sinkronisasi (check sync)
curl -s http://127.0.0.1:3030/status | jq .sync_info
